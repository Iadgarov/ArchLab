# load input
0. ADD R2 R0 R1 1000 # put immediate into r2 (mem address)
1. ADD R3 R0 R1 1001 # mem addres into r3
2. LD R2 R0 R2 # load mem[1000] into r2
3. LD R3 R0 R3 # load mem[1001] into r3

# check the operands' sign
# we multiply the absolute values and add sign (r6) at the end
4. ADD R6 R0 R0 # start with positive
5. JLE R0 R2 8 # jump to line 8 if R2 >= 0
6. XOR R6 R6 R1 1 # flip sign (now negative)
7. SUB R2 R0 R2 # r2 = -r2 (absolute value)

8. JLE R0 R3 11 # jump to line 11 if R3 >= 0
9. XOR R6 R6 R1 1 # flip sign
10. SUB R3 R0 R3 # r3 = -r3 (absolute value)

# make sure r2 <= r3 and switch them if necessary
11. JLE R2 R3 15 # jump to line 15 if R2 <= R3
12. ADD R4 R2 R0 # temporarily store r2 in r4
13. ADD R2 R3 R0 # move r3 to r2
14. ADD R3 R4 R0 # put r4 (r2) in r3

# main loop - result (and temp values) stored in r4
# idea is to add r3 according to r2's binary representation
# only takes about log(r2) additions
15. ADD R4 R0 R0 # r4 = 0
16. ADD R5 R3 R0 # start with r5 = r3 x 2^0
17. JEQ R2 R0 24 # exit loop when r2 = 0
18. AND R7 R2 R1 1 # r7 = LSB(r2)
19. JEQ R7 R0 21 # skip addition if r7 = 0
20. ADD R4 R4 R5 # r4 += r5
21. LSF R5 R5 R1 1 # r5 = r5 x 2
22. RSF R2 R2 R1 1 # r2 = r2 / 2
23. JIN R1 17 # jump back to start of loop

# negate result if necessary
24. JEQ R6 R0 26 # jump to line 26 if positive
25. SUB R4 R0 R4 # r4 = -r4 

# write result to memory
26. ADD R7 R0 R1 1002 # put mem address into r7
27. ST R4 R7 # store result
28. HLT
